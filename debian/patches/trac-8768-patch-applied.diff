--- old/src/Compiler/Program.hs	2014-06-25 11:40:46.000000000 -0700
+++ new/src/Compiler/Program.hs	2014-06-25 11:43:40.986792111 -0700
@@ -663,7 +663,7 @@
   , Flag "M"            (PassFlag (setMode doMkDependHSMode))
   , Flag "E"            (PassFlag (setMode (stopBeforeMode anyHsc)))
   , Flag "C"            (PassFlag (setMode (stopBeforeMode HCc)))
-#if MIN_VERSION_ghc(7,8,3)
+#if 1 || MIN_VERSION_ghc(7,8,3)
   , Flag "S"            (PassFlag (setMode (stopBeforeMode (As False))))
 #else
   , Flag "S"            (PassFlag (setMode (stopBeforeMode As)))
@@ -744,7 +744,7 @@
         haskellish (f,Nothing) =
           looksLikeModuleName f || isHaskellUserSrcFilename f || '.' `notElem` f
         haskellish (_,Just phase) =
-#if MIN_VERSION_ghc(7,8,3)
+#if 1 || MIN_VERSION_ghc(7,8,3)
           phase `notElem` [As False, As True, Cc, Cobjc, Cobjcpp, CmmCpp, Cmm, StopLn]
 #else
           phase `notElem` [As, Cc, Cobjc, Cobjcpp, CmmCpp, Cmm, StopLn]
--- old/src/Compiler/GhcjsHooks.hs	2014-06-25 11:40:46.000000000 -0700
+++ new/src/Compiler/GhcjsHooks.hs	2014-06-25 11:43:24.634791725 -0700
@@ -149,14 +149,14 @@
   | Just next <- lookup ph skipPhases = do
     output <- phaseOutputFilename next
     liftIO (copyFile input output `catchIOError` \_ -> return ())
-#if MIN_VERSION_ghc(7,8,3)
+#if 1 || MIN_VERSION_ghc(7,8,3)
     case ph of As _ -> (liftIO $ doFakeNative dflags (dropExtension output)); _ -> return ()
 #else
     when (ph == As) (liftIO $ doFakeNative dflags (dropExtension output))
 #endif
     return (RealPhase next, output)
   where
-#if MIN_VERSION_ghc(7,8,3)
+#if 1 || MIN_VERSION_ghc(7,8,3)
     skipPhases = [ (CmmCpp, Cmm), (Cmm, As False), (Cmm, As True), (As False, StopLn), (As True, StopLn) ]
 #else
     skipPhases = [ (CmmCpp, Cmm), (Cmm, As), (As, StopLn) ]
